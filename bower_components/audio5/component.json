{
  "name": "audio5",
  "version": "0.0.0",
  "main": [
    "./audio5.js",
    "./audio5.min.js",
    "./audio5js.swf"
  ],
  "gitHead": "539c5fb7c33a3d2626cfd7b04b80c5bc2fa20ad2",
  "readme": "# Audio5js - The HTML5 Audio Compatibility Layer\n\nAudio5js a library-agnostic, cross-browser Javascript API for HTML5 Audio, with\na Flash fallback for either older browsers or modern browsers without MP3 playback support.\n\nThere are many great audio playback libraries out there, each trying to solve a different problem.\nAudio5js tries to address or avoid the following:\n\n* **Library-agnostic** - Audio5js doesn't rely on any external library like jQuery or Dojo, leaving the DOM manipulation part to you.\n* **Multi-codec** - Audio5js assumes you'll want to support any commonly available audio codec, not just MP3.\n* **Lightweight** - Audio5js doesn't try and implement anything beyond the bare-bones HTML5 Audio playback API, keeping it light and nimble.\n* **Javascript-only** - Audio5js doesn't depend on existing `<audio>` tags in your DOM, but instead lets you programmatically control every aspect of the audio playback cycle from Javascript.\n* **No UI** - Each player is different, and therefore the visual and functional implementation is left to you. Audio5js aims to facilitate the authoring of your audio player UI by exposing a unified API, and nothing more.\n* **No fluffy penguin abuse** - Audio5js will never abuse or hurt fluffy penguins wherever they might be.\n\n## Getting Started\n\nAudio5js requires two components to work - the Javascript library `audio5.js` (or the minified version `audio5.min.js`) and the SWF fallback, found in `swf/audio5js.swf`.\n\nSimply download the source code, extract, and place both files somewhere in your project. For the purpose of demonstration,\nlet's assume your project directory structure looks like this:\n\n```\n/\n-/public\n--/js\n--- audio5.js\n--/swf\n--- audio5js.swf\n```\n\nNow, you can include the Javascript in your HTML, and instantiate the Audio player:\n\n```html\n<script src=\"/js/audio5.js\"></script>\n<script>\n  function initAudio () {\n    var audio5js = new Audio5js({\n      ready: function () {\n        this.load('/someaudio.mp3');\n        this.play();\n      }\n    });\n  }\n  initAudio();\n</script>\n```\n\n## Configuration\n\nThe Audio5js object accepts a configuration object with the following settings:\n\n* **swf_path** - The relative path to the MP3 Flash fallback SWF. Defaults to `/swf/audio5js.swf`.\n* **codecs** - Array of audio codecs to the player should try and play. Used to initialize the internal audio player based on codec support. Defaults to `['mp3']`.\n* **throw_errors** - A boolean flag indicating whether the player throws errors, or triggers an error event. Defaults to `true`.\n* **format_time** - A boolean flag indicating whether playback position and duration should be formatted to a time-string (hh:mm:ss), or remain as unformatted numbers (measured in seconds). Defaults to `true`.\n* **ready** - An optional callback that will be called when the player is ready to load and play audio. Called with an object containing player engine (html/flash) and supported codec as argument.\n\nHere's an example configuration using all the settings options above:\n\n```html\n<script>\n\n  var initAudio = function () {\n    var audio5js = new Audio5js({\n      swf_path: '/statics/swf/audio5js.swf',\n      throw_errors: true,\n      format_time: true,\n      ready: function (player) {\n        //this points to the audio5js instance\n        this.load('/audio/song.mp3');\n        this.play();\n        //will output {engine:'html', codec: 'mp3'} in browsers that support MP3 playback.\n        // will output {engine:'flash', codec: 'mp3'} otherwise\n        console.log(player);\n      }\n    });\n\n  }\n\n  initAudio();\n</script>\n```\n\n## API\n\nAudio5js exposes the following API:\n\n### Instance Methods\n\n* **load** - load an audio file from URL\n* **play** - play loaded audio\n* **pause** - pause loaded audio\n* **playPause** - toggle play/pause playback state\n* **volume** - get / set volume (volume range is 0-1)\n* **seek** - move playhead position to a given time in seconds\n\n### Instance Attributes\n\n* **playing** - boolean flag indicating whether audio is playing (true) or paused (false).\n* **duration** - audio duration in seconds.\n* **position** - audio playhead position in seconds.\n* **load_percent** - audio file download percentage (ranges 0 - 100).\n* **seekable** - audio is seekable (download) or not (streaming).\n\n### Class Methods\n\n* **can_play** - Utility method to check whether the browser supports a certain audio mime-types.\n\n`Audio5js.can_play` class method supports the following mime-type queries:\n\n* **mp3** - check for `audio/mpeg; codecs=\"mp3\"`. Example - `Audio5js.can_play('mp3')`\n* **vorbis** - check for `audio/ogg; codecs=\"vorbis\"`. Example - `Audio5js.can_play('vorbis')`\n* **opus** - check for `audio/ogg; codecs=\"opus\"`. Example - `Audio5js.can_play('opus')`\n* **webm** - check for `audio/webm; codecs=\"vorbis\"`. Example - `Audio5js.can_play('webm')`\n* **mp4** - check for `audio/mp4; codecs=\"mp4a.40.5\"`. Example - `Audio5js.can_play('mp4')`\n* **wav** - check for `audio/wav; codecs=\"1\"`. Example - `Audio5js.can_play('wav')`\n\n### API Example\n\n```html\n<button id=\"play-pause\" type=\"button\">Play / Pause</button>\n<button id=\"move-to-start\" type=\"button\">Move to Start</button>\n<script>\n\n  var audioReady = function () {\n    this.load('/audio/song.mp3');\n    var play_pause = document.getElementById('play-pause');\n    play_pause.addEventListener('click', playPause.bind(this));\n    var move_to_start = document.getElementById('move-to-start');\n    move_to_start.addEventListener('click', moveToStart.bind(this));\n  }\n\n  var playPause = function () {\n    if (this.playing) {\n      this.pause();\n      this.volume(0);\n      console.log(this.position, this.duration, this.load_percent, this.volume());\n    } else {\n      this.play();\n      this.volume(1);\n    }\n    // or simply call this.playPause();\n  }\n\n  var moveToStart = function () {\n    this.seek(0);\n  }\n\n  var initAudio = function () {\n    var audio5js = new Audio5js({\n      swf_path: '/statics/swf/audio5js.swf',\n      throw_errors: true,\n      format_time: true,\n      ready: audioReady\n    });\n\n  }\n\n  initAudio();\n</script>\n```\n\n## Events\n\nLike HTML5's Audio, Audio5js exposes events that can be used to capture the state and properties of the audio playback cycle:\n\n* **play** - triggered when the audio begins playing. Analogue to HTML5 Audio `play` event.\n* **pause** - triggered when the audio is paused. Analogue to HTML5 Audio `pause` event.\n* **ended** - triggered when the audio playback has ended. Analogue to HTML5 Audio `ended` event.\n* **error** - triggered when the audio load error occurred. Analogue to HTML5 Audio `error` event.\n* **timeupdate** - triggered when the audio playhead position changes (during playback). Analogue to HTML5 Audio `timeupdate` event.\n* **progress** - triggered while audio file is being downloaded by the browser. Analogue to HTML5 Audio `progress` event.\n\n### Using Events\n\nTo subscribe to an event triggered by Audio5js, you can use the `on` method. Similarly, to unsubscribe from an event, you can use the `off` method.\n\nThe `on` method accepts the following arguments:\n\n* **event** - name of event to subscribe to\n* **callback** - callback function to execute when the event is triggered\n* **context** - execution context of callback function (reference to `this` inside the callback)\n\nThe `off` method accepts the following arguments:\n\n* **event** - name of event to unsubscribe from\n* **callback** - the callback function passed during the event subscription\n\n```javascript\n\nvar audio5js = new Audio5js({\n  ready: audioReady\n});\n\nvar audioReady = function () {\n  //this points to the Audio5js instance\n  this.on('play', function () { console.log('play'); }, this);\n  this.on('pause', function () { console.log('pause'); }, this);\n  this.on('ended', function () { console.log('ended'); }, this);\n\n  // timeupdate event passes audio duration and position to callback\n  this.on('timeupdate', function (position, duration) {\n    console.log(position, duration);\n  }, this);\n\n  // progress event passes load_percent to callback\n  this.on('progress', function (load_percent) {\n    console.log(load_percent);\n  }, this);\n\n  //error event passes error object to callback\n  this.on('error', function (error) {\n    console.log(error.message);\n  }, this);\n}\n```\n\n## Fallbacks and multiple audio sources\n\nBrowser-based audio isn't perfect, and it's more than likely that you'll need to serve the same audio in two formats, to support\na wider crowd. If you intend to play different audio sources, based on browser codec support, pass a list of desired codecs to the\n`codecs` array of the settings object. Note that passed codecs should be listed in order or precedence and\nthat 'mp3' is always the fallback codec in case no other codec is supported by the browser.\n\nHere's an example of initializing Audio5js with multiple audio sources, based on browser support:\n\n```javascript\n\n  var audio5js = new Audio5js({\n    swf_path: '/swf/audio5js.swf',\n    codecs: ['mp4', 'vorbis', 'mp3'],\n    ready: function(player) {\n      var audio_url;\n      switch (player.codec) {\n        case 'mp4':\n          audio_url = '/audio/song.mp4';\n          break;\n        case 'vorbis':\n          audio_url = '/audio/song.ogg';\n          break;\n        default:\n          audio_url = '/audio/song.mp3';\n          break;\n      }\n      this.load(audio_url);\n      this.play();\n    }\n  });\n\n```\n\n## Safari Mobile\n\nSafari mobile won't let you play audio without explicit user interaction. In other words, the initial click on your \"play\" button\nneeds to load the audio. Here's an example of how to load and play audio on Safari Mobile with Audio5js:\n\n```html\n<button id=\"play-pause\" type=\"button\">Play / Pause</button>\n<script>\n  var loaded = false;\n\n  var playPause = function () {\n    if (!loaded) {\n      this.on('canplay', function () {\n        loaded = true;\n        this.play();\n      }, this);\n      this.load('/song.mp3');\n    } else {\n      this.playPause();\n    }\n  }\n\n  var audio5js = new Audio5js({\n    swf_path: './flash/audio5js.swf',\n    ready: function () {\n      var btn = document.getElementById('play-pause');\n      btn.addEventListener('click', playPause.bind(this), false);\n    }\n  });\n</script>\n```\n\n## AMD / RequireJS\n\nAudio5js comes baked with AMD / RequireJS support. Assuming your public directory structure is as above, here's an example of\nhow to use Audio5js with RequireJS:\n\nYour HTML should look something like this:\n\n```html\n<script src=\"js/require.js\" data-main=\"js/player\"></script>\n```\n\nInside `js/player.js` you can now require Audio5js like so:\n\n```javascript\nrequire([\"js/audio5\"], function (Audio5js) {\n  var audio5 = new Audio5js({\n    ready: function () {\n      this.load('/somesong.mp3');\n      this.play();\n    }\n  });\n} );\n```\n\n## Ender.js\n\nAudio5js can also be used with Ender.js. Here's how you can add it to your project:\n\n```bash\n# add audio5 as dependency\n$ ender build audio5\n```\n\n```javascript\n//use as a global package\nvar Audio5js = require('audio5');\nvar player = new Audio5js({\n  swf_path: 'node_modules/audio5/swf/audio5js.swf'\n});\n\n// or via the Ender $ object\nvar play = new $.audio5({\n  swf_path: 'node_modules/audio5/swf/audio5js.swf'\n});\n```\n\n## Angular.js\n\nAudio5js is available as an Angular.js service.\n\n```html```\n<!--include ngAudio5.js after audio5.js-->\n<script src=\"ngAudio5.js\"></script>\n```\n\n```javascript```\n//inject Audio5 service into our app\nvar app = angular.module('myapp',['Audio5']);\n\n//Inject the AudioService singleton into our controller\nvar PlayCtrl = function ($scope, AudioService) {\n\t//bind AudioService to scope\n\t$scope.player = AudioService;\n\t//Load the song, every event, class method and Instance attribute from audio5js are accessible from the template\n\t$scope.player.load('http://danosongs.com/music/danosongs.com-orb-of-envisage.mp3');\n\n\t//example of event binding\n\t$scope.player.on('progress',function(){\n\t\t$scope.$apply();\n\t})\n}\n```\n\n## Bower Support\n\nAudio5js is available as a Bower package.\n\n```\n$ bower install audio5js\n```\n\n```html\n<script src=\"components/audio5js/audio5.min.js\"></script>\n<script>\nvar player = new Audio5js({\n  swf_path: 'components/audio5js/audio5js.swf'\n});\n</script>\n```\n\n## Browser Support\n\nAudio5js doesn't try to please everyone. Having said that, it has been successfully tested on:\n\n* IE8, IE9\n* Chrome 23 (Mac)\n* Firefox 17 (Mac)\n* Safari 6\n* Opera 12 (Mac)\n* Safari Mobile (iOS 6.0)\n* Webkit Mobile (Android 4.0.4)\n\n## TODO\n\n* Test on mobile browsers (Android).\n\n## Contributing\n\n* Thanks to [Alex Wolkov](https://github.com/altryne) for AngularJS Demo\n* Thanks to [Yehonatan Daniv](https://github.com/ydaniv) for AMD/RequireJS support\n\nPlease feel free to fork, fix and send me pull requests. Alternatively, open tickets for bugs and feature requests.\n\n## Credits\n\nAudio5js relies heavily on the wonderful [audiojs library](http://kolber.github.com/audiojs/). The AS3 code for the fallback MP3\nplayer is taken almost as-is from audiojs, with some minor modifications for more comprehensive event handling.\n\n## License\n\nAudio5js is released under the MIT License.\n\nCopyright (c) 2013 Zohar Arad <zohar@zohararad.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## Disclaimer\n\nNo fluffy penguins were harmed during the making of Audio5js.",
  "readmeFilename": "README.md",
  "_id": "audio5@0.1.7",
  "description": "Audio5js a library-agnostic, cross-browser Javascript API for HTML5 Audio, with a Flash fallback for either older browsers or modern browsers without MP3 playback support.",
  "commit": "539c5fb7c33a3d2626cfd7b04b80c5bc2fa20ad2",
  "repository": {
    "type": "git",
    "url": "git://github.com/zohararad/audio5js-bower.git"
  }
}